#!/usr/bin/python

from numpy import *
from os import listdir
from matplotlib import pyplot as plt

frameInterval = 10

def getName(name):
    name = name.replace("/"," - ")
    name = name.replace("SafeSLAM","SAFE")
    name = name.replace("RW","Seq:")
    name = name.replace("MaxVar","")
    name = name.replace("MaxHalf","MS:")
    name = name.split("_")
    del name[2:4]
    return " ".join(name)


def openData(path):
    data = file(path,"r").readlines()
    threshold = float(data[0].split(",")[2])
    data = asarray([float(d.split(",")[1]) for d in data])
    return data, threshold


def getMatches(path):
    matches = []
    for f in listdir(path):
        if f[:5] == "I_new":
            matches.append([int(f[6:12]), int(f[17:23]), float(f[24:29].replace(",","."))])
    matches = sorted(matches)
    return matches


def getLabel(d):
    label = d[1]
    if label == "":
        label = getName(d[0])
    return label


def getGroundTruth(frame,groundTruth):
    for g in groundTruth:
        if(frame == g[0]):
            return g[1]


def precisionRecall(matches, groundTruth):
    pr = []
    for threshold in arange(0.,1.,0.001):
        nroTrues = 0.
        nroReturns = 0.
        for m in matches:
            if m[2] <= threshold:
                nroReturns += 1.
                for g in groundTruth:
                    if m[0]==g[0] and abs(m[1]-g[1]) < frameInterval:
                        nroTrues += 1.
                        break
        if nroTrues != 0.:
            precision = nroTrues/nroReturns
            recall = nroTrues/len(groundTruth)
            pr.append([precision, recall])
    return pr


def stats(matches, groundTruth):
    distances = []
    for m in matches:
        truth = getGroundTruth(m[0],groundTruth)
        if truth != None:
            distances.append((m[0],abs(truth - m[1])))

    return distances


def plotPrecisionRecall(data):
    #Recall
    f = plt.figure()
    for d in data:
        if d[1] == []:
            continue
        p, r = zip(*d[1])
        plt.plot(r,p,d[0][2], label=getLabel(d[0]))
    plt.xlim(0,1.2)
    plt.ylim(0,1.2)
    plt.legend()
    plt.title("SeqSLAM vs SAFE")
    plt.xlabel("Recall")
    plt.ylabel("Precision")


def plotPrecisionRecallMap(data):
    #Recall
    f = plt.figure()
    size = 500
    dataStep = float(size)/len(data)
    mapPlot = zeros((size,size),dtype="float32")
    yLabels = []

    for idx in range(len(data)):
        d = data[idx]
        p, r = zip(*d[1])
        
        for i in range(len(r)-1):
            xBottom, xTop = floor(r[i]*size), ceil(r[i+1]*size)
            yBottom, yTop = idx*dataStep, (idx+1)*dataStep
            mapPlot[yBottom:yTop, xBottom:xTop] = p[i]

        mapPlot[idx*dataStep:(idx+1)*dataStep,:floor(r[0]*size)] = p[0]
        #mapPlot[idx*dataStep:(idx+1)*dataStep,ceil(r[-1]*size):] = p[-1]

        #Apenas por uma linha preta para separar os resultados
        plt.plot([0,size],[idx*dataStep,idx*dataStep],"k-")
        #Guarda os nomes dos resultados para se plotar no eixo y
        yLabels.append(getLabel(d[0]))
        try:
            recall = r[len(p)-p[::-1].index(1.)]
            print getLabel(d[0]), "-", recall
        except ValueError:
            print getLabel(d[0]), "-", 0

    plt.imshow(ma.masked_where(mapPlot ==0,mapPlot),vmin=0.,vmax=1.)
    plt.xticks(arange(0.,size+1,0.1*size),arange(0.,1.1,0.1))
    plt.yticks(range(int(dataStep/2),size,int(dataStep)),yLabels)
    plt.ylim(0,size)
    plt.title("SeqSLAM vs SAFE")
    plt.xlabel("Recall")
    cb = plt.colorbar()
    cb.set_ticks(arange(0.,1.1,0.1))
    ax = cb.ax
    ax.text(-0.6,0.5,'Precision',rotation=90)



def plotPrecisionThreshold(data,groundTruth, frameInterval = 5):
    for d in data:
        truePositive = []
        falsePositive = []

        for frame, detected, guarantee in d[3]:
            truth = getGroundTruth(frame,groundTruth)
            if truth != None and frameInterval > abs(detected-truth):
                truePositive.append([frame,guarantee])
            else:
                falsePositive.append([frame,guarantee])

        f = plt.figure()
        frame, guarantee = zip(*falsePositive)
        plt.plot(frame,guarantee,"bo",label="False Positive")
        frame, guarantee = zip(*truePositive)
        plt.plot(frame,guarantee,"go",label="True Positive")
        plt.legend()
        plt.title(getLabel(d[0]))
        plt.xlabel("Frame")
        plt.ylabel("Guarantee")


groundTruth = file("groundTruth.txt","r").readlines()
groundTruth = asarray([ [int(m) for m in g.split("-")] for g in groundTruth])

#SeqSLAM_data, SeqSLAM_threshold = openData("SeqSLAM/data")
#SchvarczSLAM_data, SchvarczSLAM_threshold = openData("SchvarczSLAM/tfidf_norm/data")

#SeqSLAM_matches = getMatches("SeqSLAM/")
#SchvarczSLAM_matches = getMatches("SchvarczSLAM/tfidf_norm/")

#SeqSLAM_distances, SeqSLAM_outliers, SeqSLAM_outliers2 = precisionRecall(SeqSLAM_matches, groundTruth)
#SchvarczSLAM_distances, SchvarczSLAM_outliers, SchvarczSLAM_outliers2 = precisionRecall(SchvarczSLAM_matches, groundTruth)

#SeqSLAM_pr = precisionRecall2(SeqSLAM_matches, groundTruth)
#SchvarczSLAM_pr = precisionRecall2(SchvarczSLAM_matches, groundTruth)


dataPlot = []
pathList = [
              ["SeqSLAM/RW_5","","b-"],
              ["SeqSLAM/RW_10","","r-"],
              ["SeqSLAM/RW_15","","r--"],
              ["SeqSLAM/RW_20","","r-"],

#             ["SafeSLAM/RW_5_MaxVar_0.7_MaxHalf_5","","--"],
             ["SafeSLAM/RW_5_MaxVar_0.7_MaxHalf_10","","--"],
             ["SafeSLAM/RW_5_MaxVar_0.7_MaxHalf_15","","--"],
#             ["SafeSLAM/RW_5_MaxVar_0.7_MaxHalf_20","","--"],
#             ["SafeSLAM/RW_5_MaxVar_0.8_MaxHalf_5","","--"],
#             ["SafeSLAM/RW_5_MaxVar_0.8_MaxHalf_10","","--"],
#             ["SafeSLAM/RW_5_MaxVar_0.8_MaxHalf_15","","--"],
#             ["SafeSLAM/RW_5_MaxVar_0.8_MaxHalf_20","","--"],
#             ["SafeSLAM/RW_5_MaxVar_0.9_MaxHalf_5","","--"],
#             ["SafeSLAM/RW_5_MaxVar_0.9_MaxHalf_10","","--"],
#             ["SafeSLAM/RW_5_MaxVar_0.9_MaxHalf_15","","--"],
#             ["SafeSLAM/RW_5_MaxVar_0.9_MaxHalf_20","","--"],

             ["SafeSLAM/RW_10_MaxVar_0.7_MaxHalf_5","","--"],
             ["SafeSLAM/RW_10_MaxVar_0.7_MaxHalf_10","","b-"],
#             ["SafeSLAM/RW_10_MaxVar_0.7_MaxHalf_15","","--"],
#             ["SafeSLAM/RW_10_MaxVar_0.7_MaxHalf_20","","--"],
#             ["SafeSLAM/RW_10_MaxVar_0.8_MaxHalf_5","","--"],
#             ["SafeSLAM/RW_10_MaxVar_0.8_MaxHalf_10","","--"],
#             ["SafeSLAM/RW_10_MaxVar_0.8_MaxHalf_15","","--"],
#             ["SafeSLAM/RW_10_MaxVar_0.8_MaxHalf_20","","--"],
#             ["SafeSLAM/RW_10_MaxVar_0.9_MaxHalf_5","","--"],
#             ["SafeSLAM/RW_10_MaxVar_0.9_MaxHalf_10","","--"],
#             ["SafeSLAM/RW_10_MaxVar_0.9_MaxHalf_15","","--"],
#             ["SafeSLAM/RW_10_MaxVar_0.9_MaxHalf_20","","--"],

             ["SafeSLAM/RW_15_MaxVar_0.7_MaxHalf_5","","--"],
             ["SafeSLAM/RW_15_MaxVar_0.7_MaxHalf_10","","--"],
#             ["SafeSLAM/RW_15_MaxVar_0.7_MaxHalf_15","","--"],
#             ["SafeSLAM/RW_15_MaxVar_0.7_MaxHalf_20","","--"],
#             ["SafeSLAM/RW_15_MaxVar_0.8_MaxHalf_5","","--"],
#             ["SafeSLAM/RW_15_MaxVar_0.8_MaxHalf_10","","--"],
#             ["SafeSLAM/RW_15_MaxVar_0.8_MaxHalf_15","","--"],
#             ["SafeSLAM/RW_15_MaxVar_0.8_MaxHalf_20","","--"],
#             ["SafeSLAM/RW_15_MaxVar_0.9_MaxHalf_5","","--"],
#             ["SafeSLAM/RW_15_MaxVar_0.9_MaxHalf_10","","--"],
#             ["SafeSLAM/RW_15_MaxVar_0.9_MaxHalf_15","","--"],
#             ["SafeSLAM/RW_15_MaxVar_0.9_MaxHalf_20","","--"],

             ["SafeSLAM/RW_20_MaxVar_0.7_MaxHalf_5","","--"],
             ["SafeSLAM/RW_20_MaxVar_0.7_MaxHalf_10","","--"],
#             ["SafeSLAM/RW_20_MaxVar_0.7_MaxHalf_15","","g-"],
#             ["SafeSLAM/RW_20_MaxVar_0.7_MaxHalf_20","","--"],
#             ["SafeSLAM/RW_20_MaxVar_0.8_MaxHalf_5","","--"],
#             ["SafeSLAM/RW_20_MaxVar_0.8_MaxHalf_10","","--"],
#             ["SafeSLAM/RW_20_MaxVar_0.8_MaxHalf_15","","--"],
#             ["SafeSLAM/RW_20_MaxVar_0.8_MaxHalf_20","","--"],
#             ["SafeSLAM/RW_20_MaxVar_0.9_MaxHalf_5","","--"],
#             ["SafeSLAM/RW_20_MaxVar_0.9_MaxHalf_10","","--"],
#             ["SafeSLAM/RW_20_MaxVar_0.9_MaxHalf_15","","--"],
#             ["SafeSLAM/RW_20_MaxVar_0.9_MaxHalf_20","","--"],
    ]

for dataset in pathList[::-1]:
    path, label, linestyle = dataset
    matches = getMatches(path)
    distances = stats(matches, groundTruth)
    pr = precisionRecall(matches, groundTruth)
    if pr != []:
        dataPlot.append((dataset,pr,distances, matches))

showFixedThreshold = False

if showFixedThreshold:
    #Threshold e limite de aceites
    plotPrecisionThreshold(dataPlot,groundTruth)

#Recall
#f = plt.figure()
#plt.plot(1-SeqSLAM_distances/40)
#plt.plot(1-SchvarczSLAM_distances/40)
#plt.ylim(0,1)
#plt.title("Recall")
#plt.xlabel("Frame")
#plt.ylabel("Precision")


#Recall
#plotPrecisionRecall(dataPlot)
plotPrecisionRecallMap(dataPlot)

#Outliers
#f = plt.figure()
#plt.plot(SeqSLAM_outliers)
#plt.plot(SchvarczSLAM_outliers)
#plt.title("Outliers")
#plt.xlabel("Frame")

#Matchings
#f = plt.figure()
#x, y, m = zip(*SeqSLAM_matches)
#plt.plot(x,y)
#if SeqSLAM_outliers2 != []:
#    x, y, m = zip(*SeqSLAM_outliers2)
#    plt.plot(x,y,"ro")
#x, y, m = zip(*SchvarczSLAM_matches)
#plt.plot(x,y)
#if SeqSLAM_outliers2 != []:
#    x, y, m = zip(*SchvarczSLAM_outliers2)
#    plt.plot(x,y,"ro")
#plt.title("Matches")
#plt.xlabel("Frames 2nd")
#plt.xlabel("Frames 1st")
plt.show()
