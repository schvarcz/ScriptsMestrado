#!/usr/bin/python
from numpy import *
from os import listdir
from matplotlib import pyplot as plt

def openData(path):
    data = file(path,"r").readlines()
    threshold = float(data[0].split(",")[2])
    data = asarray([float(d.split(",")[1]) for d in data])
    return data, threshold


def getMatches(path):
    matches = []
    for f in listdir(path):
        if f[:5] == "I_new":
            matches.append([int(f[6:12]), int(f[17:23]), float(f[24:29])])
    matches = sorted(matches)
    return matches


def precisionRecall2(matches, groundTruth):
    pr = []
    for threshold in arange(1.,0.,-0.001):
        nroTrues = 0.
        nroReturns = 0.
        for m in matches:
            if m[2] <= threshold:
                nroReturns += 1.
            for g in groundTruth:
                if abs(m[0]-g[1]) < 5:
                    if m[2] <= threshold:
                        nroTrues += 1.
                    break
        if nroTrues != 0.:
            precision = nroTrues/nroReturns
            recall = nroTrues/len(groundTruth)
            pr.append([precision, recall])
    return pr


def precisionRecall(matches, groundTruth):
    distancesArray = []
    distances = []
    outliers = zeros(len(matches))
    outliers2 = []
    idx = 0
    for m in matches:
        truth = None
        for g in groundTruth:
            if(m[0] == g[0]):
                truth = g[1]
                break
        if truth != None:
            distances.append((m[0],abs(truth - m[1])))
        else:
            if distances != []:
                distancesArray.append(distances)
                distancesArray = []
            outliers[idx] = 1
            outliers2.append(m)
        idx += 1

    distances = asarray(distances).astype("float32")
    return distances, outliers, outliers2

#SeqSLAM_data, SeqSLAM_threshold = openData("SeqSLAM/data")
#SchvarczSLAM_data, SchvarczSLAM_threshold = openData("SchvarczSLAM/tfidf_norm/data")

groundTruth = file("groundTruth.txt","r").readlines()
groundTruth = asarray([ [int(m) for m in g.split(" - ")] for g in groundTruth])

SeqSLAM_matches = getMatches("SeqSLAM/")
SchvarczSLAM_matches = getMatches("SchvarczSLAM/tfidf_norm//")

SeqSLAM_distances, SeqSLAM_outliers, SeqSLAM_outliers2 = precisionRecall(SeqSLAM_matches, groundTruth)
SchvarczSLAM_distances, SchvarczSLAM_outliers, SchvarczSLAM_outliers2 = precisionRecall(SchvarczSLAM_matches, groundTruth)

SeqSLAM_pr = precisionRecall2(SeqSLAM_matches, groundTruth)
SchvarczSLAM_pr = precisionRecall2(SchvarczSLAM_matches, groundTruth)


#Threshold e limite de aceites
#plt.plot(SeqSLAM_data,"r+")
#plt.plot(where(SeqSLAM_data<SeqSLAM_threshold)[0],SeqSLAM_data[SeqSLAM_data<SeqSLAM_threshold],"bo")
#plt.plot(ones(len(SeqSLAM_data))*SeqSLAM_threshold,"g")
#plt.ylim(0,1.2)
#plt.title("SeqSLAM_threshold")
#plt.xlabel("Frame")
#plt.ylabel("Matching")

#f = plt.figure()
#plt.plot(SchvarczSLAM_data,"r+")
#plt.plot(where(SchvarczSLAM_data<SchvarczSLAM_threshold)[0],SchvarczSLAM_data[SchvarczSLAM_data<SchvarczSLAM_threshold],"bo")
#plt.plot(ones(len(SchvarczSLAM_data))*SchvarczSLAM_threshold,"g")
#plt.ylim(0,1.2)
#plt.title("SchvarczSLAM_threshold")
#plt.xlabel("Frame")
#plt.ylabel("Matching")

#Recall
#f = plt.figure()
#plt.plot(1-SeqSLAM_distances/40)
#plt.plot(1-SchvarczSLAM_distances/40)
#plt.ylim(0,1)
#plt.title("Recall")
#plt.xlabel("Frame")
#plt.ylabel("Precision")


#Recall
f = plt.figure()
p, r = zip(*SeqSLAM_pr)
plt.plot(r,p, label="SeqSLAM")
p, r = zip(*SchvarczSLAM_pr)
plt.plot(r,p, label="SchvarczSLAM")
plt.xlim(0,1.2)
plt.ylim(0,1.2)
plt.legend()
plt.title("Recall")
plt.xlabel("Frame")
plt.ylabel("Precision")

#Outliers
#f = plt.figure()
#plt.plot(SeqSLAM_outliers)
#plt.plot(SchvarczSLAM_outliers)
#plt.title("Outliers")
#plt.xlabel("Frame")

#Matchings
f = plt.figure()
x, y, m = zip(*SeqSLAM_matches)
plt.plot(x,y)
#if SeqSLAM_outliers2 != []:
#    x, y, m = zip(*SeqSLAM_outliers2)
#    plt.plot(x,y,"ro")
x, y, m = zip(*SchvarczSLAM_matches)
plt.plot(x,y)
#if SeqSLAM_outliers2 != []:
#    x, y, m = zip(*SchvarczSLAM_outliers2)
#    plt.plot(x,y,"ro")
plt.title("Matches")
plt.xlabel("Frames 2nd")
plt.xlabel("Frames 1st")
plt.show()
