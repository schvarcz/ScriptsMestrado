#!/usr/bin/python
# -*- coding:utf8 -*-

import cv2, sys, os, numpy as np
from matplotlib import pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable

nBins = 50
nRange = (0.,255.)

def showHelp():
    print """
Remove the sky from the source video

    $ otsuTest similarityMatrix [folderToSave]

          """
    sys.exit()


def otsu(img):
    hist = np.histogram(img,nBins,nRange)
    lvs, bins = hist
    bins = [(bins[i]+bins[i+1])/2 for i in range(len(bins)-1)]
    n = lvs.sum()
    p = lvs.astype("float")/n
    ut = (p*bins).sum()
    maxv, maxt, maxe = float("-inf"), float("-inf"), float("-inf")
    for t in range(1,len(lvs)-1):
        p1, p2 = p[0:t],p[t:]
        w1, w2 = p1.sum(),p2.sum()
        u1, u2 = (p1*bins[0:t]).sum()/w1, (p2*bins[t:]).sum()/w2
        #v = w1*((u1-ut)**2) + w2*((u2-ut)**2) #otsu
        v = w1*(u1**2) + w2*(u2**2) #Liao
        if maxv < v:
            maxv, maxt, maxe = v, t, 1.-min(w1,w2)/max(w1,w2)
    return bins[maxt], maxe


def otsuValley(img):
    hist = np.histogram(img,nBins,nRange)
    lvs, bins = hist
    bins = [(bins[i]+bins[i+1])/2 for i in range(len(bins)-1)]
    n = lvs.sum()
    p = lvs.astype("float")/n
    ut = (p*bins).sum()
    maxv, maxt, maxe = float("-inf"), float("-inf"), float("-inf")
    for t in range(1,len(lvs)-1):
        p1, p2 = p[0:t],p[t:]
        w1, w2 = p1.sum(),p2.sum()
        u1, u2 = (p1*bins[0:t]).sum()/w1, (p2*bins[t:]).sum()/w2
        #v = w1*((u1-ut)**2) + w2*((u2-ut)**2) #otsu
        v = (w1*(u1**2) + w2*(u2**2))*(1-p[t]) #Liao
        if maxv < v:
            maxv, maxt, maxe = v, t, 1.-min(w1,w2)/max(w1,w2)
    return bins[maxt], maxe


if __name__ == "__main__":

    if len(sys.argv) < 2:
        showHelp()

    similarityMatrixPath =os.path.expanduser(sys.argv[1])
    folderToSave = None
    if len(sys.argv) == 3:
        folderToSave = os.path.expanduser(sys.argv[2])

    similarityMatrix = cv2.cvtColor(cv2.imread(similarityMatrixPath),cv2.cv.CV_RGB2GRAY)

    plt.ion()
    fig, axes = plt.subplots(2,2)

    
    for nBins in range(30,255,5):
        sequenceLength = 15
        maxY, maxX = similarityMatrix.shape
        weights = np.zeros(similarityMatrix.shape)
        idx = 0
        for y in range(maxY-sequenceLength):
            for x in range(maxX-sequenceLength):
                rect = similarityMatrix[y:y+sequenceLength,x:x+sequenceLength]
                lvs, bins = np.histogram(rect,nBins,nRange)
                bins = [(bins[i]+bins[i+1])/2 for i in range(len(bins)-1)]
                thres, weight = otsuValley(rect)
                weights[y+sequenceLength/2,x+sequenceLength/2] = weight
            
    #            fig.clear()
    #            axes = fig.add_subplot(221), fig.add_subplot(223), fig.add_subplot(223), fig.add_subplot(122)

    #            axes[0].imshow(rect)
    #            axes[1].plot(bins,lvs)
    #            axes[1].plot([thres,thres],[0,lvs.max()],label="OTSU Valley Threshold")
    #            axes[1].set_xlim(0,255)
    #            axes[1].legend()

    #            axes[3].imshow(weights)
    #            fig.canvas.draw()
    #            if folderToSave != None:
    #                fig.savefig(folderToSave+"/I_{0:06}.png".format(idx))
    #            fig.canvas.get_tk_widget().update()
    #            idx += 1
                

        fig.clear()
        axes = fig.add_subplot(221), fig.add_subplot(223), fig.add_subplot(223), fig.add_subplot(122)

        axes[0].imshow(rect)
        axes[1].plot(bins,lvs)
        axes[1].plot([thres,thres],[0,lvs.max()],label="OTSU Valley Threshold")
        axes[1].set_xlim(0,255)
        axes[1].legend()

        axes[3].imshow(weights)
        plt.imshow(weights)
        plt.colorbar()
        fig.canvas.draw()
        if folderToSave != None:
            fig.savefig(folderToSave+"/{0:03}bins.png".format(nBins))
        fig.canvas.get_tk_widget().update()
        idx += 1

    plt.show()

    plt.close()


