#!/usr/bin/python
import sys
import numpy as np
import cv2, os
import glob

# termination criteria
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)

# prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(6,5,0)
objp = np.zeros((6*9,3), np.float32)
objp[:,:2] = np.mgrid[0:9,0:6].T.reshape(-1,2)

# Arrays to store object points and image points from all the images.
objpoints = [] # 3d point in real world space
imgpoints = [] # 2d points in image plane.

vid = cv2.VideoCapture(os.path.expanduser(sys.argv[1]))
i = 0
while vid.grab():
    i += 1
    if i%10 != 0:
        continue
    read, img = vid.retrieve()
    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)

    # Find the chess board corners
    ret, corners = cv2.findChessboardCorners(gray, (9,6),None)

    # If found, add object points, image points (after refining them)
    if ret == True:
        objpoints.append(objp)

        cv2.cornerSubPix(gray,corners,(11,11),(-1,-1),criteria)
        imgpoints.append(corners)

        # Draw and display the corners
        cv2.drawChessboardCorners(img, (9,6), corners,ret)

    cv2.imshow('img',img)
    cv2.waitKey(33)

cv2.destroyAllWindows()
cv2.waitKey(33)
print "Wait...."

ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-1],None,None)

print "Avg f: ", (mtx[0][0]+ mtx[1][1])/2
print "Camera matrix: "
print mtx
#print "dist: ", dist
#print "rvecs: ",rvecs
#print "tvecs: ",tvecs
